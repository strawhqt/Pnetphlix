Test Cases:

To test the tree:

	TreeMultimap<string, int> tmm1;
	tmm1.insert("hi", 1);
	tmm1.insert("hello", 2);
	it = tmm1.find("hi");
	assert(it.is_valid());
	assert(it.get_value() == 1);
	tmm1.insert("hi", 3);
	it.advance();
	assert(it.get_value() == 3);

	Dog* d1 = new Dog("Koda");
	Dog* d2 = new Dog("Spot");
	TreeMultimap<std::string, Dog*>* tmmptr = new TreeMultimap<std::string, Dog*>();
	tmmptr->insert("carey", d1);
	tmmptr->insert("cindy", d2);
	delete tmmptr; 
	cerr << d1->m_name;
	delete d1;
	delete d2;

	TreeMultimap<std::string, int> tmm5;
	tmm5.insert("carey", 5);
	tmm5.insert("carey", 6);
	tmm5.insert("carey", 7);
	tmm5.insert("david", 25);
	tmm5.insert("david", 425);
	it = tmm5.find("carey");
	// prints 5, 6, and 7 in some order
	int i = 0;
	while (it.is_valid() && i < 3) {
		std::cerr << it.get_value() << std::endl;
		it.advance();
		i++;
	}

To test user database and User (I inputted different email addresses and invalid addresses to see if it printed the right thing):

UserDatabase udb;
	if (!udb.load(USER_DATAFILE))  // In skeleton, load always return false
	{
		cout << "Failed to load user data file " << USER_DATAFILE << "!" << endl;
		return 1;
	}
	for (;;)
	{
		cout << "Enter user email address (or quit): ";
		string email;
		getline(cin, email);
		if (email == "quit")
			return 0;
		User* u = udb.get_user_from_email(email);
		if (u == nullptr)
			cout << "No user in the database has that email address." << endl;
		else
		{
			cout << "Found " << u->get_full_name() << endl;
			cout << "Found " << u->get_email() << endl;
			cout << "Watch History Size " << u->get_watch_history().size() << endl;
			for (int i = 0; i < u->get_watch_history().size(); i++)
			{
				cout << u->get_watch_history()[i] << endl;
			}
		}
	}

To test movie database and Movie (I searched for multiple directors, actors, and genres and verified it to the best of my ability by using Ctrl+F in the original movies.txt file. I also searched by id to see if I could find movies based on the id.)

for (;;)
{
	cout << "enter movie director to search for: ";
	string s;
	getline(cin, s);
	vector<Movie*> m = testmbd.get_movies_with_director(s);
	if (m.size() == 0)
		cout << "no movies found" << endl;
	else
	{
		for (int i = 0; i < m.size(); i++)
			cout << m[i]->get_title() << endl;
	}
	cout << "enter movie actor to search for: ";
	getline(cin, s);
	vector<Movie*> m2 = testmbd.get_movies_with_actor(s);
	if (m2.size() == 0)
		cout << "no movies found" << endl;
	else
	{
		for (int i = 0; i < m2.size(); i++)
			cout << m2[i]->get_title() << endl;
	}
	cout << "enter movie genre to search for: ";
	getline(cin, s);
	vector<Movie*> m3 = testmbd.get_movies_with_genre(s);
	if (m3.size() == 0)
		cout << "no movies found" << endl;
	else
	{
		for (int i = 0; i < m3.size(); i++)
			cout << m3[i]->get_title() << endl;
	}
	cout << "enter movie id: ";
	string id;
	getline(cin, id);
	Movie* m1 = testmbd.get_movie_from_id(id);
	if (m1 == nullptr)
		cerr << "Movie not Found" << endl;
	else
		cerr << m1->get_title() << endl;
}

To test Recommender class

I loaded in a new text file and user file with just Carey's movies and a smaller movie database that was shown in the spec.

UserDatabase testubd;
testubd.load("newusers.txt");


MovieDatabase testmbd;
testmbd.load("newmovies.txt");

Recommender r(testubd, testmbd);

string email;
out << "enter email: ";
getline(cin, email);
findMatches(r, testmbd, email, 5);

void findMatches(const Recommender& r, const MovieDatabase& md, const string& user_email, int num_recommendations) 
{
	Timer t;
	vector<MovieAndRank> recommendations = r.recommend_movies(user_email, num_recommendations);
	double time = t.elapsed();
	if (recommendations.empty())
		cout << "We found no movies to recommend :(.\n";
	else {
		for (int i = 0; i < recommendations.size(); i++) 
		{
			const MovieAndRank& mr = recommendations[i];
			Movie* m = md.get_movie_from_id(mr.movie_id);

			cout << i + 1 << ". " << m->get_title() << " ("
				<< m->get_release_year() << ")\n   Rating: "
				<< m->get_rating() << "\n   Compatibility Score: "
				<< mr.compatibility_score << "\n";
		}
	}
	cerr << time << endl;
}

I also tested with the actual movies and users files with the email KabiL@aol.com that was shown in the spec.
